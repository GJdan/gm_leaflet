<?php
/**
 * @file gm_leaflet.module
 */

/**
 * Implements hook_ctools_plugin_api().
 */
function gm_leaflet_ctools_plugin_api() {
  return array('version' => 1);
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function gm_leaflet_ctools_plugin_directory($module, $plugin) {
  return 'plugins/' . $plugin;
}

/**
 * Implements hook_ctools_plugin_type()
 */
function gm_leaflet_ctools_plugin_type() {
  $plugins = array();

  $plugins['gm_leaflet_maps'] = array(
    'defaults' => array(
      'base layers' => array(),
      'overlay layers' => array(),
      'settings' => array(),
    ),
  );
  $plugins['gm_leaflet_base_layers'] = array(
    'defaults' => array(
      'settings' => array(),
    ),
  );
  $plugins['gm_leaflet_overlay_layers'] = array(
    'defaults' => array(
      'settings' => array(),
    ),
  );
  $plugins['custom'] = array(); // This plugin type is for adding arbitrary javascript to a map.  Can be used to add literally anything that isn't covered by the previous plugins.

  return $plugins;
}

function gm_leaflet_get_maps($map_name = '') {
  ctools_include('plugins');

  if ($map_name) {
    return ctools_get_plugins('gm_leaflet', 'gm_leaflet_maps', $map_name);
  } else {
    return ctools_get_plugins('gm_leaflet', 'gm_leaflet_maps');
  }
}

function gm_leaflet_get_base_layers($layer_name = '') {
  ctools_include('plugins');
  if ($layer_name) {
    return ctools_get_plugins('gm_leaflet', 'gm_leaflet_base_layers', $layer_name);
  } else {
    return ctools_get_plugins('gm_leaflet', 'gm_leaflet_base_layers');
  }
}

function gm_leaflet_get_overlay_layers($layer_name = '') {
  ctools_include('plugins');
  if ($layer_name) {
    return ctools_get_plugins('gm_leaflet', 'gm_leaflet_overlay_layers', $layer_name);
  } else {
    return ctools_get_plugins('gm_leaflet', 'gm_leaflet_overlay_layers');
  }
}

/**
 * Implements hook_library().
 * Provide basic plugins predicted to be desired in all/most maps.
 *
 * @todo Each library should have an entry in hook_requirements to ensure if the library exists and perhaps link to where to download it.
 */
function gm_leaflet_library() {
  $libraries = array();

  $path = libraries_get_path('leaflet');
  $libraries['leaflet'] = array(
    'title' => 'Leaflet Mapping API',
    'version' => '0.5.1',
    'js' => array(
      array(
        'type' => 'file',
        'data' => $path . "/dist/leaflet.js",
        'group' => JS_LIBRARY,
        'preprocess' => FALSE,
      ),
    ),
    'css' => array(
      $path . "/dist/leaflet.css" => array(
        'type' => 'file',
        'media' => 'screen',
      ),
      $path . "/dist/leaflet.ie.css" => array(
        'browsers' => array(
          'IE' => 'lte IE 8',
          '!IE' => FALSE,
        ),
      ),
    ),
  );

  $libraries['leaflet_markercluster'] = array(
    'title' => 'Leaflet Markercluster',
    'version' => 0, // we don't have a version
    'js' => array(
      array(
        'type' => 'file',
        'data' => libraries_get_path('leaflet_markercluster') . "/dist/leaflet.markercluster.js",
        'group' => JS_LIBRARY,
        'preprocess' => FALSE,
      ),
    ),
    'css' => array(
      libraries_get_path('leaflet_markercluster') . "/dist/MarkerCluster.css" => array(
        'type' => 'file',
        'media' => 'screen',
      ),
      libraries_get_path('leaflet_markercluster') . "/dist/MarkerCluster.Default.css" => array(
        'type' => 'file',
        'media' => 'screen',
      ),
      libraries_get_path('leaflet_markercluster') . "/dist/MarkerCluster.Default.ie.css" => array(
        'browsers' => array(
          'IE' => 'lte IE 8',
          '!IE' => FALSE,
        ),
      ),
    ),
  );

  return $libraries;
}

function gm_leaflet_render_map($map_name, $map_id = '', $height = '400px', $width = '400px', $overlay_arguments = array()) {
  drupal_add_library('gm_leaflet', 'leaflet');

  $map = gm_leaflet_get_maps($map_name);
  $map_id = $map_id ? $map_id : $map_name;
  $map['id'] = $map_id;
  _gm_leaflet_prepare_maps_plugin($map, $overlay_arguments);
  $map['baseLayerCount'] = count($map['base layers']);
  $map['overlayLayerCount'] = count($map['overlay layers']);

  drupal_add_js(array('gm_leaflet' => array('map' => $map)), 'setting');  // Add map plugin to the drupal settings js object.
  drupal_add_js(drupal_get_path('module', 'gm_leaflet') . '/js/gm_leaflet.map.js');

  return array(
    '#type' => 'markup',
    '#markup' => '<div id="' . $map_id . '" style="height: ' . $height . '; width: ' . $width . ';" ></div>'
  );
}

/**
 * Populates base layer and overlay layer properties with their related plugins data.
 *
 * @param $overlay_arguments may provide an array of arguments to pass to an overlay data callback keyed by the overlay name the arguments apply to.
 */
function _gm_leaflet_prepare_maps_plugin(&$map, $overlay_arguments = array()) {
  $layers = $map['base layers'];
  $map['base layers'] = array();

  foreach ($layers as $key => $layer) {
    $plugin = gm_leaflet_get_base_layers($layer);
    $map['base layers'][$layer] = $plugin;
  }

  $layers = $map['overlay layers'];
  $map['overlay layers'] = array();

  foreach ($layers as $key => $layer) {
    $arguments = isset($overlay_arguments[$layer]) ? $overlay_arguments[$layer] : array();
    $plugin = gm_leaflet_get_overlay_layers($layer);
    $map['overlay layers'][$layer] = $plugin;

    $callback = ctools_plugin_get_function($plugin, 'data callback');
    $data = call_user_func_array($callback, $arguments);
    $map['overlay layers'][$layer]['data'] = $data;
  }
}
