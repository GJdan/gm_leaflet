<?php
/**
 * @file gm_leaflet.module
 */

/**
 * Implements hook_ctools_plugin_api().
 */
function gm_leaflet_ctools_plugin_api() {
  return array('version' => 1);
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function gm_leaflet_ctools_plugin_directory($module, $plugin) {
  return 'plugins/' . $plugin;
}

/**
 * Implements hook_ctools_plugin_type()
 */
function gm_leaflet_ctools_plugin_type() {
  $plugins = array();

  $plugins['maps'] = array(
    'defaults' => array(
      'base layers' => array(),
      'overlay layers' => array(),
      'custom_js' => array(),
      'settings' => array(),
    ),
  );
  $plugins['base_layers'] = array(
    'defaults' => array(
      'settings' => array(),
    ),
  );
  $plugins['overlay_layers'] = array(
    'defaults' => array(
      'settings' => array(),
    ),
  );
  $plugins['custom_js'] = array( // This plugin type is for adding arbitrary javascript to a map.  Can be used to add literally anything that isn't covered by the previous plugins.
    'defaults' => array(
      'data callback' => '',
    ),
  );

  return $plugins;
}

function gm_leaflet_get_maps($map_name = '') {
  ctools_include('plugins');

  if ($map_name) {
    return ctools_get_plugins('gm_leaflet', 'maps', $map_name);
  } else {
    return ctools_get_plugins('gm_leaflet', 'maps');
  }
}

function gm_leaflet_get_base_layers($layer_name = '') {
  ctools_include('plugins');
  if ($layer_name) {
    return ctools_get_plugins('gm_leaflet', 'base_layers', $layer_name);
  } else {
    return ctools_get_plugins('gm_leaflet', 'base_layers');
  }
}

function gm_leaflet_get_overlay_layers($layer_name = '') {
  ctools_include('plugins');
  if ($layer_name) {
    return ctools_get_plugins('gm_leaflet', 'overlay_layers', $layer_name);
  } else {
    return ctools_get_plugins('gm_leaflet', 'overlay_layers');
  }
}

function gm_leaflet_get_custom_js($plugin_name = '') {
  ctools_include('plugins');
  if ($plugin_name) {
    return ctools_get_plugins('gm_leaflet', 'custom_js', $plugin_name);
  } else {
    return ctools_get_plugins('gm_leaflet', 'custom_js');
  }
}

/**
 * Implements hook_libraries_info().
 */
function gm_leaflet_libraries_info() {
  $libraries = array();

  $libraries['leaflet'] = array(
    'name' => 'Leaflet Mapping API',
    'vendor url' => 'http://leafletjs.com',
    'download url' => 'http://leaflet-cdn.s3.amazonaws.com/build/leaflet-0.5.1.zip',
    'version arguments' => array(
      'file' => 'leaflet-src.js',
      'pattern' => '@L\.version\s*=\s*[\'\"]([\d\.]+)[\'\"]@',
      'lines' => 40,
    ),
    'files' => array(
      'js' => array(
        'leaflet.js' => array(
          'type' => 'file',
          'group' => JS_LIBRARY,
          'preprocess' => FALSE,
        ),
      ),
      'css' => array(
        "leaflet.css" => array(
          'type' => 'file',
          'media' => 'screen',
        ),
        "leaflet.ie.css" => array(
          'browsers' => array(
            'IE' => 'lte IE 8',
            '!IE' => FALSE,
          ),
        ),
      ),
    ),
  );

  $libraries['leaflet.zoomfs'] = array(
    'name' => 'Leaflet Fullscreen Button',
    'vendor url' => 'elidupuis.github.io/leaflet.zoomfs/',
    'download url' => 'https://github.com/elidupuis/leaflet.zoomfs/tarball/master',
    'version' => 'master',
    'files' => array(
      'js' => array(
        'leaflet.zoomfs.js' => array(
          'type' => 'file',
          'group' => JS_LIBRARY,
          'preprocess' => FALSE,
        ),
      ),
    ),
    'dependencies' => array('leaflet'),
    'callbacks' => array(
      'post-load' => array('gm_leaflet_libraries_zoomfs_post_load'),
    ),
  );

  $libraries['Leaflet.markercluster'] = array(
    'name' => 'Leaflet Markercluster',
    'vendor url' => 'https://github.com/Leaflet/Leaflet.markercluster',
    'download url' => 'https://github.com/Leaflet/Leaflet.markercluster/archive/0.2.zip',
    'path' => 'dist',
    'version arguments' => array(
      'file' => 'CHANGELOG.md',
      'pattern' => '@[\s#]*([\d\.]+)\s*\(\d{4}-\d{2}-\d{2}\)@',
    ),
    'files' => array(
      'js' => array(
        'leaflet.markercluster.js' => array(
          'type' => 'file',
          'group' => JS_LIBRARY,
          'preprocess' => FALSE,
        ),
      ),
      'css' => array(
        "MarkerCluster.css" => array(
          'type' => 'file',
          'media' => 'screen',
        ),
        "MarkerCluster.Default.css" => array(
          'type' => 'file',
          'media' => 'screen',
        ),
        "MarkerCluster.Default.ie.css" => array(
          'browsers' => array(
            'IE' => 'lte IE 8',
            '!IE' => FALSE,
          ),
        ),
      ),
    ),
    'dependencies' => array('leaflet'),
  );

  $libraries['jquery-cookie'] = array(
    'name' => 'jQuery Cookie',
    'vendar url' => 'https://github.com/carhartl/jquery-cookie',
    'download url' => 'https://github.com/carhartl/jquery-cookie/archive/v1.4.0.tar.gz',
    'version arguments' => array(
      'file' => 'jquery.cookie.js',
      'pattern' => '@v([\d\.]+)@',
    ),
    'files' => array(
      'js' => array(
        'jquery.cookie.js' => array(
          'type' => 'file',
          'group' => JS_LIBRARY,
          'preprocess' => FALSE,
        ),
      ),
    ),
  );

  $libraries['Leaflet.draw'] = array(
    'name' => 'Leaflet.draw',
    'vendor url' => 'https://github.com/Leaflet/Leaflet.draw/tree/0.2.2',
    'download url' => 'https://github.com/Leaflet/Leaflet.draw/archive/0.2.2.tar.gz',
    'path' => 'dist',
    'version arguments' => array(
      'file' => 'dist/leaflet.draw-src.js',
      'pattern' => "@L.drawVersion\s*=\s*[\'\"]([\d\.]+)[\'\"]@",
      'lines' => 40,
    ),
    'files' => array(
      'js' => array(
        'leaflet.draw.js' => array(
          'type' => 'file',
          'group' => JS_LIBRARY,
          'preprocess' => FALSE,
        ),
      ),
      'css' => array(
        'leaflet.draw.css' => array(
          'type' => 'file',
          'media' => 'screen',
        ),
        'leaflet.draw.ie.css' => array(
          'browsers' => array(
            'IE' => 'lte IE 8',
            '!IE' => FALSE,
          ),
        ),
      ),
    ),
    'dependencies' => array('leaflet (>=0.6.0)', 'jquery-cookie'),
  );

  return $libraries;
}

/**
 * A post-load callback for the leaflet.zoomfs library
 */
function gm_leaflet_libraries_zoomfs_post_load($library, $version, $variant) {
  // I'm not sure if I can add this to the css property of its library entry since this css file is stored with this module, and not with the library.
  drupal_add_css(drupal_get_path('module', 'gm_leaflet') . '/gm_leaflet-leaflet.zoomfs.css');
}

/**
 * Function for rendering a leaflet map.
 *
 * @return A renderable array to be returned directly by many drupal functions, or converted into html with drupal_render().
 *
 * @param string $map_name The name of the gm_leaflet_map to render
 * @param string $map_id HTML ID of the map div.  Must be unique within the page this is rendered on.
 * @param string $height The desired height of the div containing the map formatted for the css property 'height'.  Defaults to '400px'.
 * @param string $width The desired width of the div containing the map formatted for the css property 'width'.  Defaults to 'auto'.
 * $param array $overlay_arguments An array, keyed by plugin type and layer names, of arrays of arguments to pass to the data callback for overlay layers that require parameters be passed to their callbacks..
 */
function gm_leaflet_render_map($map_name, $map_id = '', $height = '400px', $width = 'auto', $callback_arguments = array()) {
  $map = gm_leaflet_get_maps($map_name);
  $map_id = $map_id ? $map_id : $map_name;
  $map['id'] = $map_id;
  _gm_leaflet_prepare_maps_plugin($map, $callback_arguments);
  $map['baseLayerCount'] = count($map['base layers']);
  $map['overlayLayerCount'] = count($map['overlay layers']);
  $map['height'] = $height;
  $map['width'] = $width;

  drupal_add_js(array('gm_leaflet' => array($map_id => $map)), 'setting');  // Add map plugin to the drupal settings js object.
  drupal_add_js(drupal_get_path('module', 'gm_leaflet') . '/js/gm_leaflet.map.js');

  $libraries = array(array('leaflet'), array('leaflet.zoomfs'));
  if (!empty($callback_arguments['libraries'])) { // Can provide additional libraries in the format expected by libraries_load in render arrays
    $libraries = array_merge($libraries, $callback_arguments['libraries']);
  }

  return array(
    '#type' => 'markup',
    '#markup' => '<div id="' . $map_id . '" style="height: ' . $height . '; width: ' . $width . ';" ></div>',
    '#attached' => array(
      'libraries_load' => $libraries,
    ),
  );
}

/**
 * Populates base layer and overlay layer properties with their related plugins data.
 *
 * @param $callback_arguments may provide an array of arguments to pass to an overlay data callback keyed by the overlay name the arguments apply to.
 */
function _gm_leaflet_prepare_maps_plugin(&$map, $callback_arguments = array()) {
  $layers = $map['base layers'];
  $map['base layers'] = array();

  foreach ($layers as $key => $layer) {
    $plugin = gm_leaflet_get_base_layers($layer);
    $map['base layers'][$layer] = $plugin;
  }

  $layers = $map['overlay layers'];
  $map['overlay layers'] = array();

  foreach ($layers as $key => $layer) {
    $arguments = isset($callback_arguments['overlay_layers'][$layer]) ? $callback_arguments['overlay_layers'][$layer] : array();
    $plugin = gm_leaflet_get_overlay_layers($layer);
    $map['overlay layers'][$layer] = $plugin;

    if ($plugin['type'] != 'wms') {
      $callback = ctools_plugin_get_function($plugin, 'data callback');
      $data = call_user_func_array($callback, $arguments);
      $map['overlay layers'][$layer]['data'] = $data;
    }
  }

  $custom_js = $map['custom_js'];
  $map['custom_js'] = array();
  foreach ($custom_js as $key => $plugin_name) {
    $arguments = isset($callback_arguments['custom_js'][$plugin_name]) ? $callback_arguments['custom_js'][$plugin_name] : array();
    $plugin = gm_leaflet_get_custom_js($plugin_name);
    $js_path = isset($plugin['js_path']) ? $plugin['js_path'] : $plugin['path'];
    drupal_add_js($js_path . '/' . $plugin['js_file']);
    $map['custom_js'][$plugin_name] = $plugin;

    $callback = ctools_plugin_get_function($plugin, 'data callback');
    if ($callback) {
      $data = call_user_func_array($callback, $arguments);
      $map['custom_js'][$plugin_name]['data'] = $data;
    }
  }
}
